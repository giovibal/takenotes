// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: takenotes/v1/notes.proto

package takenotesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/giovibal/takenotes/gen/takenotes/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NotesServiceName is the fully-qualified name of the NotesService service.
	NotesServiceName = "takenotes.v1.NotesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NotesServiceCreateNoteProcedure is the fully-qualified name of the NotesService's CreateNote RPC.
	NotesServiceCreateNoteProcedure = "/takenotes.v1.NotesService/CreateNote"
	// NotesServiceUpdateNoteProcedure is the fully-qualified name of the NotesService's UpdateNote RPC.
	NotesServiceUpdateNoteProcedure = "/takenotes.v1.NotesService/UpdateNote"
	// NotesServiceDeleteNoteProcedure is the fully-qualified name of the NotesService's DeleteNote RPC.
	NotesServiceDeleteNoteProcedure = "/takenotes.v1.NotesService/DeleteNote"
	// NotesServiceGetNoteProcedure is the fully-qualified name of the NotesService's GetNote RPC.
	NotesServiceGetNoteProcedure = "/takenotes.v1.NotesService/GetNote"
	// NotesServiceSearchNotesProcedure is the fully-qualified name of the NotesService's SearchNotes
	// RPC.
	NotesServiceSearchNotesProcedure = "/takenotes.v1.NotesService/SearchNotes"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	notesServiceServiceDescriptor           = v1.File_takenotes_v1_notes_proto.Services().ByName("NotesService")
	notesServiceCreateNoteMethodDescriptor  = notesServiceServiceDescriptor.Methods().ByName("CreateNote")
	notesServiceUpdateNoteMethodDescriptor  = notesServiceServiceDescriptor.Methods().ByName("UpdateNote")
	notesServiceDeleteNoteMethodDescriptor  = notesServiceServiceDescriptor.Methods().ByName("DeleteNote")
	notesServiceGetNoteMethodDescriptor     = notesServiceServiceDescriptor.Methods().ByName("GetNote")
	notesServiceSearchNotesMethodDescriptor = notesServiceServiceDescriptor.Methods().ByName("SearchNotes")
)

// NotesServiceClient is a client for the takenotes.v1.NotesService service.
type NotesServiceClient interface {
	CreateNote(context.Context, *connect.Request[v1.CreateNoteRequest]) (*connect.Response[v1.CreateNoteResponse], error)
	UpdateNote(context.Context, *connect.Request[v1.UpdateNoteRequest]) (*connect.Response[v1.UpdateNoteResponse], error)
	DeleteNote(context.Context, *connect.Request[v1.DeleteNoteRequest]) (*connect.Response[v1.DeleteNoteResponse], error)
	GetNote(context.Context, *connect.Request[v1.GetNoteRequest]) (*connect.Response[v1.GetNoteResponse], error)
	SearchNotes(context.Context, *connect.Request[v1.SearchNotesRequest]) (*connect.ServerStreamForClient[v1.SearchNotesResponse], error)
}

// NewNotesServiceClient constructs a client for the takenotes.v1.NotesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNotesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NotesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &notesServiceClient{
		createNote: connect.NewClient[v1.CreateNoteRequest, v1.CreateNoteResponse](
			httpClient,
			baseURL+NotesServiceCreateNoteProcedure,
			connect.WithSchema(notesServiceCreateNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateNote: connect.NewClient[v1.UpdateNoteRequest, v1.UpdateNoteResponse](
			httpClient,
			baseURL+NotesServiceUpdateNoteProcedure,
			connect.WithSchema(notesServiceUpdateNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteNote: connect.NewClient[v1.DeleteNoteRequest, v1.DeleteNoteResponse](
			httpClient,
			baseURL+NotesServiceDeleteNoteProcedure,
			connect.WithSchema(notesServiceDeleteNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNote: connect.NewClient[v1.GetNoteRequest, v1.GetNoteResponse](
			httpClient,
			baseURL+NotesServiceGetNoteProcedure,
			connect.WithSchema(notesServiceGetNoteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchNotes: connect.NewClient[v1.SearchNotesRequest, v1.SearchNotesResponse](
			httpClient,
			baseURL+NotesServiceSearchNotesProcedure,
			connect.WithSchema(notesServiceSearchNotesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// notesServiceClient implements NotesServiceClient.
type notesServiceClient struct {
	createNote  *connect.Client[v1.CreateNoteRequest, v1.CreateNoteResponse]
	updateNote  *connect.Client[v1.UpdateNoteRequest, v1.UpdateNoteResponse]
	deleteNote  *connect.Client[v1.DeleteNoteRequest, v1.DeleteNoteResponse]
	getNote     *connect.Client[v1.GetNoteRequest, v1.GetNoteResponse]
	searchNotes *connect.Client[v1.SearchNotesRequest, v1.SearchNotesResponse]
}

// CreateNote calls takenotes.v1.NotesService.CreateNote.
func (c *notesServiceClient) CreateNote(ctx context.Context, req *connect.Request[v1.CreateNoteRequest]) (*connect.Response[v1.CreateNoteResponse], error) {
	return c.createNote.CallUnary(ctx, req)
}

// UpdateNote calls takenotes.v1.NotesService.UpdateNote.
func (c *notesServiceClient) UpdateNote(ctx context.Context, req *connect.Request[v1.UpdateNoteRequest]) (*connect.Response[v1.UpdateNoteResponse], error) {
	return c.updateNote.CallUnary(ctx, req)
}

// DeleteNote calls takenotes.v1.NotesService.DeleteNote.
func (c *notesServiceClient) DeleteNote(ctx context.Context, req *connect.Request[v1.DeleteNoteRequest]) (*connect.Response[v1.DeleteNoteResponse], error) {
	return c.deleteNote.CallUnary(ctx, req)
}

// GetNote calls takenotes.v1.NotesService.GetNote.
func (c *notesServiceClient) GetNote(ctx context.Context, req *connect.Request[v1.GetNoteRequest]) (*connect.Response[v1.GetNoteResponse], error) {
	return c.getNote.CallUnary(ctx, req)
}

// SearchNotes calls takenotes.v1.NotesService.SearchNotes.
func (c *notesServiceClient) SearchNotes(ctx context.Context, req *connect.Request[v1.SearchNotesRequest]) (*connect.ServerStreamForClient[v1.SearchNotesResponse], error) {
	return c.searchNotes.CallServerStream(ctx, req)
}

// NotesServiceHandler is an implementation of the takenotes.v1.NotesService service.
type NotesServiceHandler interface {
	CreateNote(context.Context, *connect.Request[v1.CreateNoteRequest]) (*connect.Response[v1.CreateNoteResponse], error)
	UpdateNote(context.Context, *connect.Request[v1.UpdateNoteRequest]) (*connect.Response[v1.UpdateNoteResponse], error)
	DeleteNote(context.Context, *connect.Request[v1.DeleteNoteRequest]) (*connect.Response[v1.DeleteNoteResponse], error)
	GetNote(context.Context, *connect.Request[v1.GetNoteRequest]) (*connect.Response[v1.GetNoteResponse], error)
	SearchNotes(context.Context, *connect.Request[v1.SearchNotesRequest], *connect.ServerStream[v1.SearchNotesResponse]) error
}

// NewNotesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNotesServiceHandler(svc NotesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	notesServiceCreateNoteHandler := connect.NewUnaryHandler(
		NotesServiceCreateNoteProcedure,
		svc.CreateNote,
		connect.WithSchema(notesServiceCreateNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notesServiceUpdateNoteHandler := connect.NewUnaryHandler(
		NotesServiceUpdateNoteProcedure,
		svc.UpdateNote,
		connect.WithSchema(notesServiceUpdateNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notesServiceDeleteNoteHandler := connect.NewUnaryHandler(
		NotesServiceDeleteNoteProcedure,
		svc.DeleteNote,
		connect.WithSchema(notesServiceDeleteNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notesServiceGetNoteHandler := connect.NewUnaryHandler(
		NotesServiceGetNoteProcedure,
		svc.GetNote,
		connect.WithSchema(notesServiceGetNoteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	notesServiceSearchNotesHandler := connect.NewServerStreamHandler(
		NotesServiceSearchNotesProcedure,
		svc.SearchNotes,
		connect.WithSchema(notesServiceSearchNotesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/takenotes.v1.NotesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NotesServiceCreateNoteProcedure:
			notesServiceCreateNoteHandler.ServeHTTP(w, r)
		case NotesServiceUpdateNoteProcedure:
			notesServiceUpdateNoteHandler.ServeHTTP(w, r)
		case NotesServiceDeleteNoteProcedure:
			notesServiceDeleteNoteHandler.ServeHTTP(w, r)
		case NotesServiceGetNoteProcedure:
			notesServiceGetNoteHandler.ServeHTTP(w, r)
		case NotesServiceSearchNotesProcedure:
			notesServiceSearchNotesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNotesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNotesServiceHandler struct{}

func (UnimplementedNotesServiceHandler) CreateNote(context.Context, *connect.Request[v1.CreateNoteRequest]) (*connect.Response[v1.CreateNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("takenotes.v1.NotesService.CreateNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) UpdateNote(context.Context, *connect.Request[v1.UpdateNoteRequest]) (*connect.Response[v1.UpdateNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("takenotes.v1.NotesService.UpdateNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) DeleteNote(context.Context, *connect.Request[v1.DeleteNoteRequest]) (*connect.Response[v1.DeleteNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("takenotes.v1.NotesService.DeleteNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) GetNote(context.Context, *connect.Request[v1.GetNoteRequest]) (*connect.Response[v1.GetNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("takenotes.v1.NotesService.GetNote is not implemented"))
}

func (UnimplementedNotesServiceHandler) SearchNotes(context.Context, *connect.Request[v1.SearchNotesRequest], *connect.ServerStream[v1.SearchNotesResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("takenotes.v1.NotesService.SearchNotes is not implemented"))
}
